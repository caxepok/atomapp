using atomapp.api.Infrastructure;
using atomapp.api.Services.Interfaces;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace atomapp.api.Services
{
    /// <inheritdoc cref="IPythonService"/>
    public class PythonService : IPythonService
    {
        private readonly ILogger _logger;
        private readonly AppSettings _appSettings;

        public PythonService(ILogger<PythonService> logger, IOptions<AppSettings> options)
        {
            _logger = logger;
            _appSettings = options.Value;
        }

        public string Run(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python";
            start.WorkingDirectory = _appSettings.VoskPath;
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using Process process = Process.Start(start);
            using StreamReader outputReader = new StreamReader(process.StandardOutput.BaseStream, Encoding.GetEncoding(1251));
            using StreamReader errorReader = new StreamReader(process.StandardError.BaseStream, Encoding.GetEncoding(1251));
            string stderr = errorReader.ReadToEnd(); // Here are the exceptions from our Python script
            string result = outputReader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
            if (!String.IsNullOrEmpty(stderr))
                _logger.LogWarning("Vosk recognizer warnings: {0}", stderr);
            return result;
        }
    }
}
